/* programa que abre ou cria um arquivo de registros de tamanho fixo.
   Os registros podem ser adicionados ou modificados.
   Registros a serem modificados são buscados por RRN */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

// CONSTANTES
#define DELIM_STR "|"
#define REC_LGTH 64
                      
// GLOBAIS
char *prompt[] = {
     "    Sobrenome: ",
     "Primeiro nome: ",
     "     Endereco: ",
     "       Cidade: ",
     "       Estado: ",
     "          CEP: ",
     "" //null string to terminate the prompt loop
};

struct {
    int rec_count;
} header; // headerer do arquivo - 4 bytes

FILE* fd;

// INTERFACES
int menu();
void ask_info(char*);
int ask_rrn();
void read_and_show();
int change();
char ucase(char);
void fld_to_buff(char*, char*);
int input(char*, int);

// IMPLEMENTAÇÕES
int main(){

    int i, menu_choice, rrn;
    int byte_offset;
    char filename[30];
    char buffer[REC_LGTH+1];

    printf("Digite o nome do arquivo: ");
    input(filename, 30);
    
    if ((fd = fopen(filename,"r+")) == NULL) {
       fd = fopen(filename, "w+");
       header.rec_count = 0;
       fwrite(&header, sizeof(header), 1, fd);
    }
    else
        fread(&header, sizeof(header), 1, fd);

    while ((menu_choice = menu()) < 3){

          switch(menu_choice){
             case 1: //inserção
                  printf("Digite os dados para o novo registro\n\n");
                  ask_info(buffer);
                  byte_offset = header.rec_count * REC_LGTH + sizeof(header);
                  fseek(fd, (long) byte_offset, SEEK_SET);
                  fwrite(buffer, sizeof(char), REC_LGTH, fd);
                  header.rec_count++;
                  break;

             case 2: //busca e alteração
                  rrn = ask_rrn();

                  if (rrn >= header.rec_count){
                     printf("O RRN eh muito grande");
                     printf("... retornando ao menu ...");
                     break;
                  }

                  byte_offset = rrn * REC_LGTH + sizeof(header);
                  fseek(fd, (long) byte_offset, SEEK_SET);

                  read_and_show();

                  if (change()){
                     printf("\n\nDigite os novos dados do registro: \n\n");
                     ask_info(buffer);
                     fseek(fd, (long) byte_offset, SEEK_SET);
                     fwrite(buffer, sizeof(char), REC_LGTH, fd);
                  }
                  break;
          } // end switch
    }// end while

    rewind(fd);
    fwrite(&header, sizeof(header), 1, fd);

    fclose(fd);
}// end main

/* funcao local para perguntar ao usuario pelal prox. operação
   retorna um valor numérico */
int menu(){

	 char choice[10];

     printf("\n\n\n\n\t PROGRAMA PARA CRIACAO E ALTERACAO DE ARQUIVO\n");
     printf("\n\nSuas opcoes sao:\n\n");
     printf("\t1. Adicionar um registro ao final do arquivo\n");
     printf("\t2. Recuperar um registro por RRN para alteracoes \n");
     printf("\t3. Terminar o programa\n\n");
     printf("Digite o numero da sua escolha: ");
     input(choice, 10);
     
     return(atoi(choice));

} // end menu

/* função para a entrada de um nome e um endereço,
   escrevendo-os no buffer passado por parametro */
void ask_info(char buffer[]){

     int field_count, i;
     char field[50];

     // clear record buffer
     buffer[0] = '\0';

     // get fiels
     for (i = 0; prompt[i] != ""; i++){
         printf("%s", prompt[i]);
         input(field, 50);
         fld_to_buff(buffer,field);
     }
}

/* funcao para a entrada do RRN do registro a ser alterado */
int ask_rrn(){
    int rrn;

    printf("\n\nDigite o RRN do registro: ");
    scanf("%d", &rrn);
	getchar();
    return(rrn);
}

/* funcao que lê e mostra um registro, sem seek.
   a leitura começa na posição atual do arquivo */
void read_and_show(){

     char buffer[REC_LGTH+1];
     char *field;

     fread(buffer, sizeof(char), REC_LGTH, fd);
     buffer[REC_LGTH] = '\0';

     printf("\n\n\n\nConteudo do registro\n");
	 field = strtok(buffer, DELIM_STR);
	 
	 while (field != NULL) {
	 	printf("\t%s\n",field);
		field = strtok(NULL, DELIM_STR);
	}
}

/* função para perguntar ao usuário se ele quer modificar o registro ou nao
   Retorna 1 para YES e 0 para NO */
int change(){

    char response;

    printf("\n\nVoce quer modificar este registro?\n");
    printf("    Responda S or N, seguido de <ENTER> ==>");
    response = getchar();
    getchar(); //descarta o enter
    response = ucase(response);
    return((response == 'S') ? 1 : 0);
}

/* Converte o char ci para UPPERCASE e retorna em co */
char ucase(char ci){
     char co = (ci >= 'a' && ci <= 'z') ? ci & 0x5f : ci;
     return co;
}

/* Converte a string si para UPPERCASE e retorna em so */
/*void ucase(char si[], char so[]){
     while (*so++ = (*si >= 'a' && *si <= 'z') ? *si & 0x5f : *si)
           si++;
}*/

/* função que adiciona ao buffer a string field e o delimitador "|"
*/
void fld_to_buff(char * buffer, char * field){
	
	strcat(buffer, field); 
    strcat(buffer, DELIM_STR);

}


/* função que lê uma linha do stdin para a string str 
*/
int input(char * str, int size) {    

	int i = 0;    
	char c = getchar();    

	while (c != '\n') {        
		if (size > 0) {            
			str[i] = c;            
			i++;            
			size--;        
		}        
		c = getchar();   
	}    

	str[i] = '\0';    
	return i;
}

